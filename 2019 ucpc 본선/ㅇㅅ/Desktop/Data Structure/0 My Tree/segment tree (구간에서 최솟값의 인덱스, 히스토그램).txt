struct segtree{
    vector<int> A, Tree;
    void init_size(int n){ /// this is 0 - based
        A.resize(n);
        int h = (int)ceil(log2(n));
        int tree_size = (1<<(h+1));
        Tree.resize(tree_size);
    }
    void init(int node,int start,int finish){
        if(start==finish) Tree[node] = start;
        else{
            init(node*2,start,(start+finish)/2);
            init(node*2+1,(start+finish)/2+1,finish);
            Tree[node] = A[Tree[node*2]]<A[Tree[node*2+1]]?Tree[node*2]:Tree[node*2+1];
        }
    }
    int query(int node,int start,int finish,int left,int right){
        if(left>finish||right<start) return -1;
        if(left<=start&&finish<=right) return Tree[node];
        ll q1 = query(node*2,start,(start+finish)/2,left,right);
        ll q2 = query(node*2+1,(start+finish)/2+1,finish,left,right);
        if(q1==-1) return q2;
        if(q2==-1) return q1;
        return A[q1]<A[q2]?q1:q2;
    }
}sg;